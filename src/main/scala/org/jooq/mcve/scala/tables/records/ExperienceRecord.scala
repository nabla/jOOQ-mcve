/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.scala.tables.records


import java.lang.Integer
import java.lang.String
import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.scala.tables.Experience


/**
 * This class is generated by jOOQ.
 */
class ExperienceRecord extends UpdatableRecordImpl[ExperienceRecord](Experience.EXPERIENCE) with Record8[Integer, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String] {

  /**
   * Setter for <code>mcve.experience.id</code>.
   */
  def setId(value: Integer): Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>mcve.experience.id</code>.
   */
  def getId: Integer = get(0).asInstanceOf[Integer]

  /**
   * Setter for <code>mcve.experience.last_modified</code>.
   */
  def setLastModified(value: OffsetDateTime): Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>mcve.experience.last_modified</code>.
   */
  def getLastModified: OffsetDateTime = get(1).asInstanceOf[OffsetDateTime]

  /**
   * Setter for <code>mcve.experience.patient_typing_at</code>.
   */
  def setPatientTypingAt(value: OffsetDateTime): Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>mcve.experience.patient_typing_at</code>.
   */
  def getPatientTypingAt: OffsetDateTime = get(2).asInstanceOf[OffsetDateTime]

  /**
   * Setter for <code>mcve.experience.patient_seen_until</code>.
   */
  def setPatientSeenUntil(value: OffsetDateTime): Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>mcve.experience.patient_seen_until</code>.
   */
  def getPatientSeenUntil: OffsetDateTime = get(3).asInstanceOf[OffsetDateTime]

  /**
   * Setter for <code>mcve.experience.created_at</code>.
   */
  def setCreatedAt(value: OffsetDateTime): Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>mcve.experience.created_at</code>.
   */
  def getCreatedAt: OffsetDateTime = get(4).asInstanceOf[OffsetDateTime]

  /**
   * Setter for <code>mcve.experience.closed_at</code>.
   */
  def setClosedAt(value: OffsetDateTime): Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>mcve.experience.closed_at</code>.
   */
  def getClosedAt: OffsetDateTime = get(5).asInstanceOf[OffsetDateTime]

  /**
   * Setter for <code>mcve.experience.title</code>.
   */
  def setTitle(value: String): Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>mcve.experience.title</code>.
   */
  def getTitle: String = get(6).asInstanceOf[String]

  /**
   * Setter for <code>mcve.experience.description</code>.
   */
  def setDescription(value: String): Unit = {
    set(7, value)
  }

  /**
   * Getter for <code>mcve.experience.description</code>.
   */
  def getDescription: String = get(7).asInstanceOf[String]

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override def key: Record1[Integer] = super.key.asInstanceOf[ Record1[Integer] ]

  // -------------------------------------------------------------------------
  // Record8 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow: Row8[Integer, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String] = super.fieldsRow.asInstanceOf[ Row8[Integer, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String] ]

  override def valuesRow: Row8[Integer, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String] = super.valuesRow.asInstanceOf[ Row8[Integer, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String] ]
  override def field1: Field[Integer] = Experience.EXPERIENCE.ID
  override def field2: Field[OffsetDateTime] = Experience.EXPERIENCE.LAST_MODIFIED
  override def field3: Field[OffsetDateTime] = Experience.EXPERIENCE.PATIENT_TYPING_AT
  override def field4: Field[OffsetDateTime] = Experience.EXPERIENCE.PATIENT_SEEN_UNTIL
  override def field5: Field[OffsetDateTime] = Experience.EXPERIENCE.CREATED_AT
  override def field6: Field[OffsetDateTime] = Experience.EXPERIENCE.CLOSED_AT
  override def field7: Field[String] = Experience.EXPERIENCE.TITLE
  override def field8: Field[String] = Experience.EXPERIENCE.DESCRIPTION
  override def component1: Integer = getId
  override def component2: OffsetDateTime = getLastModified
  override def component3: OffsetDateTime = getPatientTypingAt
  override def component4: OffsetDateTime = getPatientSeenUntil
  override def component5: OffsetDateTime = getCreatedAt
  override def component6: OffsetDateTime = getClosedAt
  override def component7: String = getTitle
  override def component8: String = getDescription
  override def value1: Integer = getId
  override def value2: OffsetDateTime = getLastModified
  override def value3: OffsetDateTime = getPatientTypingAt
  override def value4: OffsetDateTime = getPatientSeenUntil
  override def value5: OffsetDateTime = getCreatedAt
  override def value6: OffsetDateTime = getClosedAt
  override def value7: String = getTitle
  override def value8: String = getDescription

  override def value1(value: Integer): ExperienceRecord = {
    setId(value)
    this
  }

  override def value2(value: OffsetDateTime): ExperienceRecord = {
    setLastModified(value)
    this
  }

  override def value3(value: OffsetDateTime): ExperienceRecord = {
    setPatientTypingAt(value)
    this
  }

  override def value4(value: OffsetDateTime): ExperienceRecord = {
    setPatientSeenUntil(value)
    this
  }

  override def value5(value: OffsetDateTime): ExperienceRecord = {
    setCreatedAt(value)
    this
  }

  override def value6(value: OffsetDateTime): ExperienceRecord = {
    setClosedAt(value)
    this
  }

  override def value7(value: String): ExperienceRecord = {
    setTitle(value)
    this
  }

  override def value8(value: String): ExperienceRecord = {
    setDescription(value)
    this
  }

  override def values(value1 : Integer, value2 : OffsetDateTime, value3 : OffsetDateTime, value4 : OffsetDateTime, value5 : OffsetDateTime, value6 : OffsetDateTime, value7 : String, value8 : String): ExperienceRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this.value8(value8)
    this
  }

  /**
   * Create a detached, initialised ExperienceRecord
   */
  def this(id : Integer, lastModified : OffsetDateTime, patientTypingAt : OffsetDateTime, patientSeenUntil : OffsetDateTime, createdAt : OffsetDateTime, closedAt : OffsetDateTime, title : String, description : String) = {
    this()

    this.setId(id)
    this.setLastModified(lastModified)
    this.setPatientTypingAt(patientTypingAt)
    this.setPatientSeenUntil(patientSeenUntil)
    this.setCreatedAt(createdAt)
    this.setClosedAt(closedAt)
    this.setTitle(title)
    this.setDescription(description)
  }
}
