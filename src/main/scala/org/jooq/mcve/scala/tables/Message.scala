/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.scala.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.time.OffsetDateTime
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row13
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.scala.Keys
import org.jooq.mcve.scala.Mcve
import org.jooq.mcve.scala.tables.records.MessageRecord

import scala.Array


object Message {

  /**
   * The reference instance of <code>mcve.message</code>
   */
  val MESSAGE = new Message
}

/**
 * This class is generated by jOOQ.
 */
class Message(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, MessageRecord],
  aliased: Table[MessageRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[MessageRecord](
  alias,
  Mcve.MCVE,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[MessageRecord] = classOf[MessageRecord]

  /**
   * The column <code>mcve.message.id</code>.
   */
  val ID: TableField[MessageRecord, Integer] = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), "")

  /**
   * The column <code>mcve.message.created_at</code>.
   */
  val CREATED_AT: TableField[MessageRecord, OffsetDateTime] = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), "")

  /**
   * The column <code>mcve.message.event_time</code>.
   */
  val EVENT_TIME: TableField[MessageRecord, OffsetDateTime] = createField(DSL.name("event_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), "")

  /**
   * The column <code>mcve.message.experience_id</code>.
   */
  val EXPERIENCE_ID: TableField[MessageRecord, Integer] = createField(DSL.name("experience_id"), SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>mcve.message.text_content</code>.
   */
  val TEXT_CONTENT: TableField[MessageRecord, String] = createField(DSL.name("text_content"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), "")

  /**
   * The column <code>mcve.message.type</code>.
   */
  val TYPE: TableField[MessageRecord, String] = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'TEXT'::text", SQLDataType.CLOB)), "")

  /**
   * The column <code>mcve.message.doctor_id</code>.
   */
  val DOCTOR_ID: TableField[MessageRecord, Integer] = createField(DSL.name("doctor_id"), SQLDataType.INTEGER, "")

  /**
   * The column <code>mcve.message.file_upload_id</code>.
   */
  val FILE_UPLOAD_ID: TableField[MessageRecord, Integer] = createField(DSL.name("file_upload_id"), SQLDataType.INTEGER, "")

  /**
   * The column <code>mcve.message.reply_message_id</code>.
   */
  val REPLY_MESSAGE_ID: TableField[MessageRecord, Integer] = createField(DSL.name("reply_message_id"), SQLDataType.INTEGER, "")

  /**
   * The column <code>mcve.message.is_reply</code>.
   */
  val IS_REPLY: TableField[MessageRecord, Boolean] = createField(DSL.name("is_reply"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), "")

  /**
   * The column <code>mcve.message.sender_type</code>.
   */
  val SENDER_TYPE: TableField[MessageRecord, String] = createField(DSL.name("sender_type"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'DOCTOR'::text", SQLDataType.CLOB)), "")

  /**
   * The column <code>mcve.message.is_automatic</code>.
   */
  val IS_AUTOMATIC: TableField[MessageRecord, Boolean] = createField(DSL.name("is_automatic"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), "")

  /**
   * The column <code>mcve.message.has_deleted_content</code>.
   */
  val HAS_DELETED_CONTENT: TableField[MessageRecord, Boolean] = createField(DSL.name("has_deleted_content"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), "")

  private def this(alias: Name, aliased: Table[MessageRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>mcve.message</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.mcve.scala.tables.Message.MESSAGE)

  /**
   * Create an aliased <code>mcve.message</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.mcve.scala.tables.Message.MESSAGE)

  /**
   * Create a <code>mcve.message</code> table reference
   */
  def this() = this(DSL.name("message"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, MessageRecord]) = this(Internal.createPathAlias(child, key), child, key, org.jooq.mcve.scala.tables.Message.MESSAGE, null)

  override def getSchema: Schema = Mcve.MCVE

  override def getIdentity: Identity[MessageRecord, Integer] = super.getIdentity.asInstanceOf[ Identity[MessageRecord, Integer] ]

  override def getPrimaryKey: UniqueKey[MessageRecord] = Keys.MESSAGE_PKEY

  override def getKeys: List[ UniqueKey[MessageRecord] ] = Arrays.asList[ UniqueKey[MessageRecord] ](Keys.MESSAGE_PKEY)
  override def as(alias: String): Message = new Message(DSL.name(alias), this)
  override def as(alias: Name): Message = new Message(alias, this)

  /**
   * Rename this table
   */
  override def rename(name: String): Message = new Message(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Message = new Message(name, null)

  // -------------------------------------------------------------------------
  // Row13 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row13[Integer, OffsetDateTime, OffsetDateTime, Integer, String, String, Integer, Integer, Integer, Boolean, String, Boolean, Boolean] = super.fieldsRow.asInstanceOf[ Row13[Integer, OffsetDateTime, OffsetDateTime, Integer, String, String, Integer, Integer, Integer, Boolean, String, Boolean, Boolean] ]
}
