/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.scala.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.time.OffsetDateTime
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.scala.Keys
import org.jooq.mcve.scala.Mcve
import org.jooq.mcve.scala.tables.records.ExperienceRecord

import scala.Array


object Experience {

  /**
   * The reference instance of <code>mcve.experience</code>
   */
  val EXPERIENCE = new Experience
}

/**
 * This class is generated by jOOQ.
 */
class Experience(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, ExperienceRecord],
  aliased: Table[ExperienceRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[ExperienceRecord](
  alias,
  Mcve.MCVE,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[ExperienceRecord] = classOf[ExperienceRecord]

  /**
   * The column <code>mcve.experience.id</code>.
   */
  val ID: TableField[ExperienceRecord, Integer] = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), "")

  /**
   * The column <code>mcve.experience.last_modified</code>.
   */
  val LAST_MODIFIED: TableField[ExperienceRecord, OffsetDateTime] = createField(DSL.name("last_modified"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), "")

  /**
   * The column <code>mcve.experience.patient_typing_at</code>.
   */
  val PATIENT_TYPING_AT: TableField[ExperienceRecord, OffsetDateTime] = createField(DSL.name("patient_typing_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), "")

  /**
   * The column <code>mcve.experience.patient_seen_until</code>.
   */
  val PATIENT_SEEN_UNTIL: TableField[ExperienceRecord, OffsetDateTime] = createField(DSL.name("patient_seen_until"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), "")

  /**
   * The column <code>mcve.experience.created_at</code>.
   */
  val CREATED_AT: TableField[ExperienceRecord, OffsetDateTime] = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), "")

  /**
   * The column <code>mcve.experience.closed_at</code>.
   */
  val CLOSED_AT: TableField[ExperienceRecord, OffsetDateTime] = createField(DSL.name("closed_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), "")

  /**
   * The column <code>mcve.experience.title</code>.
   */
  val TITLE: TableField[ExperienceRecord, String] = createField(DSL.name("title"), SQLDataType.CLOB, "")

  /**
   * The column <code>mcve.experience.description</code>.
   */
  val DESCRIPTION: TableField[ExperienceRecord, String] = createField(DSL.name("description"), SQLDataType.CLOB, "")

  private def this(alias: Name, aliased: Table[ExperienceRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>mcve.experience</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.mcve.scala.tables.Experience.EXPERIENCE)

  /**
   * Create an aliased <code>mcve.experience</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.mcve.scala.tables.Experience.EXPERIENCE)

  /**
   * Create a <code>mcve.experience</code> table reference
   */
  def this() = this(DSL.name("experience"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, ExperienceRecord]) = this(Internal.createPathAlias(child, key), child, key, org.jooq.mcve.scala.tables.Experience.EXPERIENCE, null)

  override def getSchema: Schema = Mcve.MCVE

  override def getIdentity: Identity[ExperienceRecord, Integer] = super.getIdentity.asInstanceOf[ Identity[ExperienceRecord, Integer] ]

  override def getPrimaryKey: UniqueKey[ExperienceRecord] = Keys.EXPERIENCE_PKEY

  override def getKeys: List[ UniqueKey[ExperienceRecord] ] = Arrays.asList[ UniqueKey[ExperienceRecord] ](Keys.EXPERIENCE_PKEY)
  override def as(alias: String): Experience = new Experience(DSL.name(alias), this)
  override def as(alias: Name): Experience = new Experience(alias, this)

  /**
   * Rename this table
   */
  override def rename(name: String): Experience = new Experience(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Experience = new Experience(name, null)

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row8[Integer, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String] = super.fieldsRow.asInstanceOf[ Row8[Integer, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String] ]
}
