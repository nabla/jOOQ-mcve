/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.Keys;
import org.jooq.mcve.java.Mcve;
import org.jooq.mcve.java.tables.records.ExperienceRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Experience extends TableImpl<ExperienceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mcve.experience</code>
     */
    public static final Experience EXPERIENCE = new Experience();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExperienceRecord> getRecordType() {
        return ExperienceRecord.class;
    }

    /**
     * The column <code>mcve.experience.id</code>.
     */
    public final TableField<ExperienceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mcve.experience.last_modified</code>.
     */
    public final TableField<ExperienceRecord, OffsetDateTime> LAST_MODIFIED = createField(DSL.name("last_modified"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>mcve.experience.patient_typing_at</code>.
     */
    public final TableField<ExperienceRecord, OffsetDateTime> PATIENT_TYPING_AT = createField(DSL.name("patient_typing_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>mcve.experience.patient_seen_until</code>.
     */
    public final TableField<ExperienceRecord, OffsetDateTime> PATIENT_SEEN_UNTIL = createField(DSL.name("patient_seen_until"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>mcve.experience.created_at</code>.
     */
    public final TableField<ExperienceRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>mcve.experience.closed_at</code>.
     */
    public final TableField<ExperienceRecord, OffsetDateTime> CLOSED_AT = createField(DSL.name("closed_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>mcve.experience.title</code>.
     */
    public final TableField<ExperienceRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>mcve.experience.description</code>.
     */
    public final TableField<ExperienceRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private Experience(Name alias, Table<ExperienceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Experience(Name alias, Table<ExperienceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mcve.experience</code> table reference
     */
    public Experience(String alias) {
        this(DSL.name(alias), EXPERIENCE);
    }

    /**
     * Create an aliased <code>mcve.experience</code> table reference
     */
    public Experience(Name alias) {
        this(alias, EXPERIENCE);
    }

    /**
     * Create a <code>mcve.experience</code> table reference
     */
    public Experience() {
        this(DSL.name("experience"), null);
    }

    public <O extends Record> Experience(Table<O> child, ForeignKey<O, ExperienceRecord> key) {
        super(child, key, EXPERIENCE);
    }

    @Override
    public Schema getSchema() {
        return Mcve.MCVE;
    }

    @Override
    public Identity<ExperienceRecord, Integer> getIdentity() {
        return (Identity<ExperienceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExperienceRecord> getPrimaryKey() {
        return Keys.EXPERIENCE_PKEY;
    }

    @Override
    public List<UniqueKey<ExperienceRecord>> getKeys() {
        return Arrays.<UniqueKey<ExperienceRecord>>asList(Keys.EXPERIENCE_PKEY);
    }

    @Override
    public Experience as(String alias) {
        return new Experience(DSL.name(alias), this);
    }

    @Override
    public Experience as(Name alias) {
        return new Experience(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Experience rename(String name) {
        return new Experience(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Experience rename(Name name) {
        return new Experience(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
