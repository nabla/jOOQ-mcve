/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.Keys;
import org.jooq.mcve.java.Mcve;
import org.jooq.mcve.java.tables.records.MessageRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Message extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mcve.message</code>
     */
    public static final Message MESSAGE = new Message();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>mcve.message.id</code>.
     */
    public final TableField<MessageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mcve.message.created_at</code>.
     */
    public final TableField<MessageRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>mcve.message.event_time</code>.
     */
    public final TableField<MessageRecord, OffsetDateTime> EVENT_TIME = createField(DSL.name("event_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>mcve.message.experience_id</code>.
     */
    public final TableField<MessageRecord, Integer> EXPERIENCE_ID = createField(DSL.name("experience_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mcve.message.text_content</code>.
     */
    public final TableField<MessageRecord, String> TEXT_CONTENT = createField(DSL.name("text_content"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>mcve.message.type</code>.
     */
    public final TableField<MessageRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'TEXT'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>mcve.message.doctor_id</code>.
     */
    public final TableField<MessageRecord, Integer> DOCTOR_ID = createField(DSL.name("doctor_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mcve.message.file_upload_id</code>.
     */
    public final TableField<MessageRecord, Integer> FILE_UPLOAD_ID = createField(DSL.name("file_upload_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mcve.message.reply_message_id</code>.
     */
    public final TableField<MessageRecord, Integer> REPLY_MESSAGE_ID = createField(DSL.name("reply_message_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mcve.message.is_reply</code>.
     */
    public final TableField<MessageRecord, Boolean> IS_REPLY = createField(DSL.name("is_reply"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>mcve.message.sender_type</code>.
     */
    public final TableField<MessageRecord, String> SENDER_TYPE = createField(DSL.name("sender_type"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'DOCTOR'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>mcve.message.is_automatic</code>.
     */
    public final TableField<MessageRecord, Boolean> IS_AUTOMATIC = createField(DSL.name("is_automatic"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>mcve.message.has_deleted_content</code>.
     */
    public final TableField<MessageRecord, Boolean> HAS_DELETED_CONTENT = createField(DSL.name("has_deleted_content"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private Message(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Message(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mcve.message</code> table reference
     */
    public Message(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>mcve.message</code> table reference
     */
    public Message(Name alias) {
        this(alias, MESSAGE);
    }

    /**
     * Create a <code>mcve.message</code> table reference
     */
    public Message() {
        this(DSL.name("message"), null);
    }

    public <O extends Record> Message(Table<O> child, ForeignKey<O, MessageRecord> key) {
        super(child, key, MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return Mcve.MCVE;
    }

    @Override
    public Identity<MessageRecord, Integer> getIdentity() {
        return (Identity<MessageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Keys.MESSAGE_PKEY;
    }

    @Override
    public List<UniqueKey<MessageRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageRecord>>asList(Keys.MESSAGE_PKEY);
    }

    @Override
    public Message as(String alias) {
        return new Message(DSL.name(alias), this);
    }

    @Override
    public Message as(Name alias) {
        return new Message(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(String name) {
        return new Message(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Name name) {
        return new Message(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, OffsetDateTime, OffsetDateTime, Integer, String, String, Integer, Integer, Integer, Boolean, String, Boolean, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
