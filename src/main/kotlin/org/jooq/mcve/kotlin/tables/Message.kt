/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables


import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row13
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.kotlin.Mcve
import org.jooq.mcve.kotlin.keys.MESSAGE_PKEY
import org.jooq.mcve.kotlin.tables.records.MessageRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Message(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, MessageRecord>?,
    aliased: Table<MessageRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<MessageRecord>(
    alias,
    Mcve.MCVE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mcve.message</code>
         */
        val MESSAGE = Message()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MessageRecord> = MessageRecord::class.java

    /**
     * The column <code>mcve.message.id</code>.
     */
    val ID: TableField<MessageRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>mcve.message.created_at</code>.
     */
    val CREATED_AT: TableField<MessageRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>mcve.message.event_time</code>.
     */
    val EVENT_TIME: TableField<MessageRecord, OffsetDateTime?> = createField(DSL.name("event_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>mcve.message.experience_id</code>.
     */
    val EXPERIENCE_ID: TableField<MessageRecord, Int?> = createField(DSL.name("experience_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>mcve.message.text_content</code>.
     */
    val TEXT_CONTENT: TableField<MessageRecord, String?> = createField(DSL.name("text_content"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "")

    /**
     * The column <code>mcve.message.type</code>.
     */
    val TYPE: TableField<MessageRecord, String?> = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'TEXT'::text", SQLDataType.CLOB)), this, "")

    /**
     * The column <code>mcve.message.doctor_id</code>.
     */
    val DOCTOR_ID: TableField<MessageRecord, Int?> = createField(DSL.name("doctor_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>mcve.message.file_upload_id</code>.
     */
    val FILE_UPLOAD_ID: TableField<MessageRecord, Int?> = createField(DSL.name("file_upload_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>mcve.message.reply_message_id</code>.
     */
    val REPLY_MESSAGE_ID: TableField<MessageRecord, Int?> = createField(DSL.name("reply_message_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>mcve.message.is_reply</code>.
     */
    val IS_REPLY: TableField<MessageRecord, Boolean?> = createField(DSL.name("is_reply"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>mcve.message.sender_type</code>.
     */
    val SENDER_TYPE: TableField<MessageRecord, String?> = createField(DSL.name("sender_type"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'DOCTOR'::text", SQLDataType.CLOB)), this, "")

    /**
     * The column <code>mcve.message.is_automatic</code>.
     */
    val IS_AUTOMATIC: TableField<MessageRecord, Boolean?> = createField(DSL.name("is_automatic"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>mcve.message.has_deleted_content</code>.
     */
    val HAS_DELETED_CONTENT: TableField<MessageRecord, Boolean?> = createField(DSL.name("has_deleted_content"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    private constructor(alias: Name, aliased: Table<MessageRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<MessageRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mcve.message</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mcve.message</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mcve.message</code> table reference
     */
    constructor(): this(DSL.name("message"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, MessageRecord>): this(Internal.createPathAlias(child, key), child, key, MESSAGE, null)
    override fun getSchema(): Schema = Mcve.MCVE
    override fun getIdentity(): Identity<MessageRecord, Int?> = super.getIdentity() as Identity<MessageRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<MessageRecord> = MESSAGE_PKEY
    override fun getKeys(): List<UniqueKey<MessageRecord>> = listOf(MESSAGE_PKEY)
    override fun `as`(alias: String): Message = Message(DSL.name(alias), this)
    override fun `as`(alias: Name): Message = Message(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Message = Message(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Message = Message(name, null)

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row13<Int?, OffsetDateTime?, OffsetDateTime?, Int?, String?, String?, Int?, Int?, Int?, Boolean?, String?, Boolean?, Boolean?> = super.fieldsRow() as Row13<Int?, OffsetDateTime?, OffsetDateTime?, Int?, String?, String?, Int?, Int?, Int?, Boolean?, String?, Boolean?, Boolean?>
}
