/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables.records


import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.tables.Experience


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ExperienceRecord() : UpdatableRecordImpl<ExperienceRecord>(Experience.EXPERIENCE), Record8<Int?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, String?, String?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var lastModified: OffsetDateTime?
        set(value) = set(1, value)
        get() = get(1) as OffsetDateTime?

    var patientTypingAt: OffsetDateTime?
        set(value) = set(2, value)
        get() = get(2) as OffsetDateTime?

    var patientSeenUntil: OffsetDateTime?
        set(value) = set(3, value)
        get() = get(3) as OffsetDateTime?

    var createdAt: OffsetDateTime?
        set(value) = set(4, value)
        get() = get(4) as OffsetDateTime?

    var closedAt: OffsetDateTime?
        set(value) = set(5, value)
        get() = get(5) as OffsetDateTime?

    var title: String?
        set(value) = set(6, value)
        get() = get(6) as String?

    var description: String?
        set(value) = set(7, value)
        get() = get(7) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, String?, String?> = super.fieldsRow() as Row8<Int?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, String?, String?>
    override fun valuesRow(): Row8<Int?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, String?, String?> = super.valuesRow() as Row8<Int?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, OffsetDateTime?, String?, String?>
    override fun field1(): Field<Int?> = Experience.EXPERIENCE.ID
    override fun field2(): Field<OffsetDateTime?> = Experience.EXPERIENCE.LAST_MODIFIED
    override fun field3(): Field<OffsetDateTime?> = Experience.EXPERIENCE.PATIENT_TYPING_AT
    override fun field4(): Field<OffsetDateTime?> = Experience.EXPERIENCE.PATIENT_SEEN_UNTIL
    override fun field5(): Field<OffsetDateTime?> = Experience.EXPERIENCE.CREATED_AT
    override fun field6(): Field<OffsetDateTime?> = Experience.EXPERIENCE.CLOSED_AT
    override fun field7(): Field<String?> = Experience.EXPERIENCE.TITLE
    override fun field8(): Field<String?> = Experience.EXPERIENCE.DESCRIPTION
    override fun component1(): Int? = id
    override fun component2(): OffsetDateTime? = lastModified
    override fun component3(): OffsetDateTime? = patientTypingAt
    override fun component4(): OffsetDateTime? = patientSeenUntil
    override fun component5(): OffsetDateTime? = createdAt
    override fun component6(): OffsetDateTime? = closedAt
    override fun component7(): String? = title
    override fun component8(): String? = description
    override fun value1(): Int? = id
    override fun value2(): OffsetDateTime? = lastModified
    override fun value3(): OffsetDateTime? = patientTypingAt
    override fun value4(): OffsetDateTime? = patientSeenUntil
    override fun value5(): OffsetDateTime? = createdAt
    override fun value6(): OffsetDateTime? = closedAt
    override fun value7(): String? = title
    override fun value8(): String? = description

    override fun value1(value: Int?): ExperienceRecord {
        this.id = value
        return this
    }

    override fun value2(value: OffsetDateTime?): ExperienceRecord {
        this.lastModified = value
        return this
    }

    override fun value3(value: OffsetDateTime?): ExperienceRecord {
        this.patientTypingAt = value
        return this
    }

    override fun value4(value: OffsetDateTime?): ExperienceRecord {
        this.patientSeenUntil = value
        return this
    }

    override fun value5(value: OffsetDateTime?): ExperienceRecord {
        this.createdAt = value
        return this
    }

    override fun value6(value: OffsetDateTime?): ExperienceRecord {
        this.closedAt = value
        return this
    }

    override fun value7(value: String?): ExperienceRecord {
        this.title = value
        return this
    }

    override fun value8(value: String?): ExperienceRecord {
        this.description = value
        return this
    }

    override fun values(value1: Int?, value2: OffsetDateTime?, value3: OffsetDateTime?, value4: OffsetDateTime?, value5: OffsetDateTime?, value6: OffsetDateTime?, value7: String?, value8: String?): ExperienceRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised ExperienceRecord
     */
    constructor(id: Int? = null, lastModified: OffsetDateTime? = null, patientTypingAt: OffsetDateTime? = null, patientSeenUntil: OffsetDateTime? = null, createdAt: OffsetDateTime? = null, closedAt: OffsetDateTime? = null, title: String? = null, description: String? = null): this() {
        this.id = id
        this.lastModified = lastModified
        this.patientTypingAt = patientTypingAt
        this.patientSeenUntil = patientSeenUntil
        this.createdAt = createdAt
        this.closedAt = closedAt
        this.title = title
        this.description = description
    }
}
